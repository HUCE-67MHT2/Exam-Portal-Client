import { QuestionAnswerService } from '../../../../../core/services/question-answer.service';
import { QuestionService } from '../../../../../core/services/question.service';
import {Component} from "@angular/core";
import {ActivatedRoute, Router} from "@angular/router";
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';


@Component({
  selector: "app-question-bank",
  imports: [CommonModule, FormsModule],
  templateUrl: "./question-bank.component.html",
  styleUrl: "./question-bank.component.scss",
})
export class QuestionBankComponent {
  examSessionId = ""
  exam_session_id = "";
  exam_session_name = "";
  exam_session_description = "";
  isEditing = false;
  questions: any[] = [];
  questionsId: number[] = [];
  questionContent = "";
  answerResponse : any[] = [];
  answers: any[] = [];

  constructor(private route: ActivatedRoute, private router: Router, private questionAnwserService: QuestionAnswerService, private questionService: QuestionService) {
    this.examSessionId = JSON.parse(localStorage.getItem("selectedSession") || "{}").id;
  }

  ngOnInit(): void {
    this.getQuestions()
    this.route.queryParams.subscribe((params) => {
      this.exam_session_id = params["exam_session_id"] || "";
      this.exam_session_name = params["exam_session_name"] || "";
      this.exam_session_description = params["exam_session_description"] || "";
    });
  }

  navigateToQuestion() {
    this.router
      .navigate(["/exam/auto-generate/create-auto-generate/question"], {
        queryParams: {
          exam_session_id: this.exam_session_id,
          exam_session_name: this.exam_session_name,
          exam_session_description: this.exam_session_description,
        },
      })
  }

  getQuestions() {
    this.questionService.getQuestionsByExamSessionId(this.examSessionId).subscribe((response) => {
      this.questions = response.questions;
      console.log("Questions:", this.questions);
      this.getQuestionId()
      console.log("Questions ID:", this.questionsId);
      this.getAnswersResponse();
    });

  }

  getQuestionId() {
    for (let i = 0; i < this.questions.length; i++) {
      this.questionsId.push(this.questions[i].id);
    }
  }

  getAnswersResponse() {
    this.questionsId.forEach((questionId) => {
      this.questionAnwserService.getAutoGeneratedAnswers(questionId).subscribe((response) => {
        this.answerResponse.push(response);
        console.log("AnswersRP:", this.answerResponse);
      });
    })
  }

  getAnswers() {
    this.answerResponse.forEach((answer) => {
      this.answers.push(answer);
      console.log("Answers:", this.answers);
    })
  }

  toggleEdit() {
    this.isEditing = !this.isEditing;
  }

  deleteQuestion(index: number) {
    this.questions.splice(index, 1);
    this.answerResponse.splice(index, 1);
  }

}
