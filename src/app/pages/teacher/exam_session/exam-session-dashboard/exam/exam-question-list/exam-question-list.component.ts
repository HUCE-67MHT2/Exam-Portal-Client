import { Component, OnInit } from "@angular/core";
import { ActivatedRoute, Router, RouterModule } from "@angular/router";
import { CommonModule } from "@angular/common";
import { ExamQuestionService } from "../../../../../../core/services/exam-question.service";
import { QuestionService } from "../../../../../../core/services/question.service";
import { QuestionAnswerService } from "../../../../../../core/services/question-answer.service";
import { forkJoin } from "rxjs";

@Component({
  selector: "app-exam-question-list",
  imports: [CommonModule, RouterModule],
  templateUrl: "./exam-question-list.component.html",
  styleUrl: "./exam-question-list.component.scss",
})
export class ExamQuestionListComponent implements OnInit {
  exam_session_id = "";
  exam_session_name = "";
  exam_session_description = "";
  exam_name = "";
  exam_id = 0;
  questions: any[] = [];
  questionsId: any[] = [];
  answers: any[] = [];

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private examQuestion: ExamQuestionService,
    private questionService: QuestionService,
    private questionAnswerService: QuestionAnswerService
  ) {}

  async ngOnInit(): Promise<void> {
    this.route.queryParams.subscribe(async (params) => {
      this.exam_session_id = params["exam_session_id"];
      this.exam_session_name = params["exam_session_name"];
      this.exam_session_description = params["exam_session_description"];
      this.exam_name = params["exam_name"];
      this.exam_id = params["exam_id"];

      await this.getQuestions();
      await this.getQuestionDetails(); // Đợi lấy xong chi tiết câu hỏi
      this.getAnswerDetails(); // Sau đó mới lấy đáp án
    });
  }

  goBack() {
    this.router.navigate(["/teacher/exam-session-dashboard"], {
      queryParams: {
        exam_session_id: this.exam_session_id,
        exam_session_name: this.exam_session_name,
        exam_session_description: this.exam_session_description,
      },
    });
  }

  getQuestions(): Promise<number[]> {
    return new Promise((resolve, reject) => {
      this.examQuestion.getQuestionsByExamId(this.exam_id).subscribe({
        next: (response) => {
          const ids = response.questions.map((q: any) => q.questionId);
          this.questionsId = ids;

          console.log("Questions ID:", this.questionsId);
          console.log("Response:", response.questions);

          if (response.status === 200) {
            this.questions = response.body.questions;
            this.answers = response.body.answers;
          }

          resolve(ids);
        },
        error: (error) => {
          console.error("Error fetching questions:", error);
          reject(error);
        },
      });
    });
  }

  getQuestionDetails(): Promise<void> {
    return new Promise((resolve) => {
      const requests = this.questionsId.map((questionId) =>
        this.questionService.getQuestionById(questionId)
      );
      forkJoin(requests).subscribe({
        next: (responses: any[]) => {
          responses.forEach((response) => {
            console.log("Question details:", response);
            this.questions.push(response.question);
          });
          resolve();
        },
        error: (error) => {
          console.error("Error fetching question details:", error);
          resolve(); // Resolve để không bị treo nếu có lỗi
        },
      });
    });
  }

  getAnswerDetails() {
    this.questions.forEach((question) => {
      this.questionAnswerService
        .getAutoGeneratedAnswers(question.id)
        .subscribe({
          next: (response) => {
            console.log("Answer details:", response);
            this.answers.push(response);
          },
          error: (error) => {
            console.error("Error fetching answer details:", error);
          },
        });
    });
  }
}
